https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-group-authoring-templates#syntax

TODO: Need to handle JSON string escape characters

				{
					"patterns": [
						{
							"name": "constant.character.escape.json.comments",
							"$comment": "These are JSON string escape characters, not ARM",
							"match": "(?x) # turn on extended mode\n \\\\ # a literal backslash\n (?: # ...followed by...\n [\"\\\\/bfnrt] # one of these characters\n | # ...or...\n u # a u\n    [0-9a-fA-F]{4}) # and four hex digits",
						},
						{
							"match": "\\\\.",
							"name": "invalid.illegal.unrecognized-string-escape.arm-deployment"
						}
					]
				}

TODO: arrays
TODO: objects

TODO: An expression can return a string, integer, boolean, array, or object.
TODO: Unicode?
TODO:
	                    case '.':
                        yield return new ExpressionToken { Type = ExpressionTokenType.Dot, Value = "." };
                        break;

                    case ',':
                        yield return new ExpressionToken { Type = ExpressionTokenType.Comma, Value = ", " };
                        break;

                    case '(':
                        yield return new ExpressionToken { Type = ExpressionTokenType.LeftParenthesis, Value = "(" };
                        break;

                    case ')':
                        yield return new ExpressionToken { Type = ExpressionTokenType.RightParenthesis, Value = ")" };
                        break;

                    case '[':
                        yield return new ExpressionToken { Type = ExpressionTokenType.LeftSquareBracket, Value = "[" };
                        break;

                    case ']':
                        yield return new ExpressionToken { Type = ExpressionTokenType.RightSquareBracket, Value = "]" };
                        break;

TODO:
	 case '\'':
                        while (currentPosition < expression.Length)
                        {
                            currentPosition = ExpressionScanner.ScanForward(
                                expression: expression,
                                startPosition: currentPosition + 1,
                                predicate: character => character != '\'');

                            // NOTE(jogao): skip the 2nd \' for next ScanForward
                            if (currentPosition + 1 < expression.Length && expression[currentPosition + 1] == '\'')
                            {
                                currentPosition++;
                            }
                            else
                            {
                                break;
                            }
                        }

TODO: should flag "[]" as missing an expression
TODO: test: "[variables('environmentSettings')[parameters('environmentName')].instanceSize]"

TODO:
	When defining a user function, there are some restrictions:
	The function can't access variables.
	The function can only use parameters that are defined in the function. When you use the parameters function within a user-defined function, you're restricted to the parameters for that function.
	The function can't call other user-defined functions.
	The function can't use the reference function.
	Parameters for the function can't have default values.

TODO:
    "$TEST": "[concat('sudo sh config-bootstrap-node.sh ',parameters('AdminUser'),' ''',parameters('AdminPassword'),''' anyauth 5 10 public ',parameters('LicenseKey'),' ',parameters('Licensee'))]",
    "$TEST": "[concat('sudo sh config-additional-node.sh ',parameters('AdminUser'),' ''',parameters('AdminPassword'),''' anyauth 5 10 ',string(variables('enableHA')),' ',parameters('LicenseKey'),' ',parameters('Licensee'))]"
